/* ==========================================================================
   Typography styles (Global).
   ========================================================================== */

// Global typography settings
//////////////////////////////


////////////////////////////////////////////////
// ======== CHECK THIS SOLUTION OUT ========
// http://www.gridlover.net/
////////////////////////////////////////////////



html {
    color: darken($white, 30%);
    background-color: $black;
    font-family: $font-primary;
    font-weight: $fw-primary-light;
    font-size: $base-font-size;
    line-height: 1.4;


    // https://bugsnag.com/blog/responsive-typography-with-rems

    // http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
}


///////////////////////////////////////////////////////////////////////////////////
/**
 * Convert font-size from px to rem with px fallback
 *
 * @param $size - the value in pixel you want to convert
 *
 * e.g. p {@include fontSize(12px);}
 * 
 */

// Function for converting a px based font-size to rem.
@function calculateRem($size) {
  $remSize: $size / $base-font-size; // = 16px
    // Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

// ===============================================
// Alternative option ==> could be more refined...
// ===============================================

// @function countRem($value) {
//  $remValue: $value / $base-font-size;
//  @return $remValue * 1rem;
// }
// @mixin fontSize($value) {
//  font-size: $value;
//  font-size: calculateRem($value);
// }

///////////////////////////////////////////////////////////////////////////////////

/*

    16PX IN REMS, WOULD TAKE 16PX / 16PX = 1 >>> 1REM = 16PX
    18PX IN REMS, WOULD TAKE 18PX / 16PX = 1.125 >>> 1.125REM = 18PX
    20PX IN REMS, WOULD TAKE 20PX / 16PX = 1.25 >>> 1.25REM = 20PX
    22PX IN REMS, WOULD TAKE 22PX / 16PX = 1.375 >>> 1.375REM = 22PX
    24PX IN REMS, WOULD TAKE 24PX / 16PX = 1.5 >>> 1.5REM = 24PX
    26PX IN REMS, WOULD TAKE 26PX / 16PX = 1.625 >>> 1.625REM = 26PX
    28PX IN REMS, WOULD TAKE 28PX / 16PX = 1.75 >>> 1.75REM = 28PX
    30PX IN REMS, WOULD TAKE 30PX / 16PX = 1.875 >>> 1.875REM = 30PX

    etc......

*/

// Titles
//////////

h1, h2, h3, h4, h5 {
    font-weight: $fw-primary-light;
}
h1 {
    @include fontSize(24px);
    color: $white;

    @include break-point(640px) {
        @include fontSize(28px);
    }
}
h2 {
    @include fontSize(22px);
    color: darken($white, 10%);
}
h3 {
    @include fontSize(18px);
    color: darken($white, 20%);
}

// <p> tag snuck in here...
p {
    margin: pxToEm(10px 0, $base-font-size);
}

/*
 * Remove text-shadow in selection highlight: h5bp.com/i
 * These selection rule sets have to be separate.
 * Customize the background color to match your design.
 */

::-moz-selection {
    //background: #b3d4fc;
    text-shadow: none;
}

::selection {
    //background: #b3d4fc;
    text-shadow: none;
}

///////////////////////////////////////////////////

// Icon Fonts
//////////////

@font-face {
    font-family: 'icomoon';
    src:url('../fonts/icomoon.eot?y4m61d');
    src:url('../fonts/icomoon.eot?#iefixy4m61d') format('embedded-opentype'),
        url('../fonts/icomoon.woff?y4m61d') format('woff'),
        url('../fonts/icomoon.ttf?y4m61d') format('truetype'),
        url('../fonts/icomoon.svg?y4m61d#icomoon') format('svg');
    font-weight: normal;
    font-style: normal;
}

[class^="icon-"], [class*=" icon-"] {
    font-family: 'icomoon';
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;

    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}


// Usage examples...
////////////////////

.icon-home:before {
    content: "\e600";
}
.icon-basket:before {
    content: "\e601";
}
.icon-menu:before {
    content: "\e602";
}
.icon-eject:before {
    content: "\e603";
}

/////////////////////////////////////////////////////



//////////////////////////////////////////////////////
// Importing Web Fonts
// =====================
// Importing Web Fonts with variable-exists()
//////////////////////////////////////////////////////

// >>> This is from an example found here http://sassbreak.com/web-fonts-variable-exists/ <<<


// Web font URLs...
$font-google-prim : 'http://fonts.googleapis.com/css?family=Lato:100,300,400';
$font-google-sec  : 'http://fonts.googleapis.com/css?family=PT+Serif:400,700';


// With variable-exists(), we can tell Sass to import a font into our style sheet if $font-google-prim or $font-google-sec exist in our project...
@if variable-exists(font-google-prim) {
  @import url($font-google-prim);
}
@if variable-exists(font-google-sec) {
  @import url($font-google-sec);
}

////////////////////////////////////////////////////
// Now you can add this function to your Sass starter template to handle all web font imports. Define the web font variables you need in a _config or _variables partial and Sass will take care of the rest!
////////////////////////////////////////////////////

// Font Stacks...
$stack-lato     : 'Lato', sans-serif;
$stack-pt-serif : 'PT Serif', serif;

// Main Styles...
body {
  font-family: $stack-lato;
}
h1 {
  font-family: $stack-pt-serif;
}


/////////////////////////////////////////////////////


